#!/usr/bin/env php
<?php

use Symfony\Component\Console\Input\ArgvInput;
use Symfony\Component\Console\Output\ConsoleOutput;
use Symfony\Component\Console\Question\Question;
use Symfony\Component\Console\Helper\QuestionHelper;

require __DIR__.'/../vendor/autoload.php';

$input = new ArgvInput();
$output = new ConsoleOutput();
$helper = new QuestionHelper();

$output->writeln('');
$output->writeln('<fg=blue;options=bold>╔════════════════════════════════════════╗</>');
$output->writeln('<fg=blue;options=bold>║  Symfony Base Project Setup            ║</>');
$output->writeln('<fg=blue;options=bold>╚════════════════════════════════════════╝</>');
$output->writeln('');

// Prompt for project name
$question = new Question('<fg=yellow>Enter your project name:</> ', 'My Symfony App');
$projectName = $helper->ask($input, $output, $question);

// Prompt for vendor/package name
$question = new Question('<fg=yellow>Enter your composer package name (vendor/package):</> ', 'myvendor/myproject');
$question->setValidator(function ($answer) {
    if (!preg_match('/^[a-z0-9\-]+\/[a-z0-9\-]+$/', $answer)) {
        $answer = 'myvendor/myproject';
    }
    return $answer;
});
$packageName = $helper->ask($input, $output, $question);

// Update .env file
$envFile = __DIR__ . '/../.env';
if (!file_exists($envFile)) {
    $output->writeln('<error>Error: .env file not found!</error>');
    exit(1);
}

$envContent = file_get_contents($envFile);
$envContent = preg_replace(
    '/^APP_NAME=.*$/m',
    'APP_NAME="' . addslashes($projectName) . '"',
    $envContent
);
file_put_contents($envFile, $envContent);

// Update composer.json
$composerFile = __DIR__ . '/../composer.json';
if (!file_exists($composerFile)) {
    $output->writeln('<error>Error: composer.json file not found!</error>');
    exit(1);
}

$composerData = json_decode(file_get_contents($composerFile), true);
$composerData['name'] = $packageName;
$composerData['description'] = $projectName;
$composerData['version'] = '1.0.0';

// Remove the post-create-project-cmd script
if (isset($composerData['scripts']['post-create-project-cmd'])) {
    unset($composerData['scripts']['post-create-project-cmd']);
    if (empty($composerData['scripts'])) {
        unset($composerData['scripts']);
    }
}

file_put_contents($composerFile, json_encode($composerData, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES) . "\n");

$output->writeln('');
$output->writeln('<fg=green;options=bold>✓ Project created successfully!</>');
$output->writeln("<fg=green>✓ APP_NAME set to: {$projectName}</>");
$output->writeln("<fg=green>✓ Composer package set to: {$packageName}</>");
$output->writeln('<fg=green>✓ Version set to: 1.0.0</>');
$output->writeln('');
$output->writeln('<fg=gray>Happy coding! 🚀</>');
$output->writeln('');

// Clean up setup files
$setupScript = __FILE__;
$envTemplate = __DIR__ . '/../.env.template';
$readme = __DIR__ . '/../README.md';

if (file_exists($readme)) {
    unlink($readme);
}

if (file_exists($envTemplate)) {
    unlink($envTemplate);
}

if (file_exists($setupScript)) {
    unlink($setupScript);
}